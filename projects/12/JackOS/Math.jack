// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powersOfTwo;

    /** Initializes the library. */
    function void init() {
        var int i, n;

        let powersOfTwo = Array.new(16);
        let i = 0;
        let n = 1;

        while (i < 16) {
            let powersOfTwo[i] = n;
            let i = i + 1;
            let n = n + n;
        }

        return;
    }

    function boolean bit(int number, int i) {
        return (number & powersOfTwo[i]) > 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var boolean negativeResult;
        var int i, shiftedX, sum;

        if (x < 0) {
            let x = Math.abs(x);
            let negativeResult = ~negativeResult;
        }

        if (y < 0) {
            let y = Math.abs(y);
            let negativeResult = ~negativeResult;
        }

        let shiftedX = x;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        if (negativeResult) {
            let sum = -sum;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean negativeResult;
        var int result;

        if (x < 0) {
            let x = Math.abs(x);
            let negativeResult = ~negativeResult;
        }

        if (y < 0) {
            let y = Math.abs(y);
            let negativeResult = ~negativeResult;
        }

        let result = Math.innerDivide(x, y);

        if (negativeResult) {
            let result = -result;
        }

        return result;
    }

    /** Returns the quotient of both input parameters if they are unsinged integers. */
    function int innerDivide(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.innerDivide(x, y + y);
        
        if ((x - ((q + q) * y)) < y) {
            return q + q;
        }
        
        return 2 * q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, tmp, powerOfTmp;

        let j = 7;
        
        while (j > -1) {
            let tmp = powersOfTwo[j] + y; // + y;
            let powerOfTmp = tmp * tmp;

            if (~(powerOfTmp > x) & powerOfTmp > 0) {
                
                let y = tmp;
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }

        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }

        return a;
    }

    /** Returns the power of 2 by the given exponent. */
    function int getPowerOfTwo(int i) {
        return powersOfTwo[i];
    }
}
